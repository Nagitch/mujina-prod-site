import{s as Ve,a as De,e as Ze,n as Xe}from"../chunks/scheduler.Csg792vZ.js";import{S as et,i as tt,k as lt,l as st,m as nt,n as at,o as it,p as ot,e as n,s as a,H as pt,c as i,q as p,f as o,r as rt,u as b,g as l,d as s}from"../chunks/index.htsGj4VD.js";import{P as Ft,g as ct,a as Qe}from"../chunks/post_layout.D9iBft6w.js";function vt(R){let r,f='<a href="#モチベーション">モチベーション</a>',d,v,F="バージョン管理のエコシステムとしては GitHub がデファクトスタンダードではありますが、プロジェクトによっては少々無理が生じることがあります。",c,u,xe='今回の私の場合では、ゲーム開発のプロジェクトで大量のバイナリファイルを扱う見込みですが、 GitHub では <a href="https://docs.github.com/ja/billing/managing-billing-for-git-large-file-storage/about-billing-for-git-large-file-storage#purchasing-additional-storage-and-bandwidth" rel="nofollow noopener noreferrer external" target="_blank">容量制限</a> があり、（執筆時点では）ストレージが無料枠で 1 GB のストレージ, 追加購入プランでも 50GiB かつ帯域幅（例えば、ダウンロードで使う通信量を含む）も 50GiB/月までとなっており、そこそこの規模のゲームであれば容易に使い果たしてしまう可能性があります。',Y,M,Ce='一応代替策として <a href="https://alanedwardes.com/blog/posts/serverless-git-lfs-for-game-dev/" rel="nofollow noopener noreferrer external" target="_blank">LFS を別のサービス(AWS S3 など)にホスティング</a> したり、 <a href="https://qiita.com/Nagitch/items/cee05ef6526f1cc9e0be" rel="nofollow noopener noreferrer external" target="_blank">LFS だけローカルでホスティングする</a> という荒業も可能ですが、AWS を利用するのであれば正しい知識を持ってプロダクションレベルで管理しないと構成がめちゃくちゃになる可能性がありますし（経験あり）、個人レベルではわずかながらコストがかかるのも気になります。',W,H,be="そんなわけで色々考えるのもめんどくさくなり、バックアップ策という意味ではクラウド必須ではないし、 PC が分かれてればいいでしょ…ということで、自宅で少々持て余していた Mac Mini (M2Pro) に GitLab をホスティングすることにしました。",Z,L,Me="ただし GitHub を捨てるということは草が生えないという点が残念ですが、対策のために労力を費やすモチベーションもそんなにないので、まぁいいかなという感じです。",Q,_,He='<a href="#構成">構成</a>',J,h,Le="構成を下記に一覧しますが、基本的には Docker で GitLab をホスティングするというだけです。",K,T,he=`ただ注意点としては、ハードウェアに関してはそれなりのスペックが必要です。最近の Mac (Mini) であれば十分そうですが、当初 Docker ホスティング機能のある NAS(QNAP, メモリ 8GB ぐらい)を利用しようとしたところ、スペックが足りず断念しました。
<a href="https://docs.gitlab.com/ee/install/requirements.html" rel="nofollow noopener noreferrer external" target="_blank">参考：GitLab の動作要件</a>`,V,k,Te='<li>ハードウェア: Mac Mini (M2Pro)</li> <li>仮想化バックエンド: OrbStack (Docker Desktop の代替)</li> <li>GitLab イメージ: <a href="https://hub.docker.com/r/gitlab/gitlab-ce" rel="nofollow noopener noreferrer external" target="_blank">gitlab/gitlab-ce:latest</a><ul><li>EE(Enterprise Edition) ではなく CE(Community Edition) を利用</li></ul></li>',X,m,ke='<a href="#導入手順">導入手順</a>',ee,g,ge=`導入手順としてはシンプルで、GitLab のコンテナを起動するだけです。
GitLab のイメージは単一で完全なインフラストラクチャ(DB など)を構成してくれるので、コンテナを起動するだけで動作します。`,te,y,Pe='<a href="#docker-composeyml-を作成">docker-compose.yml を作成</a>',le,P,we='<a href="https://gitlab-docs.creationline.com/ee/install/docker.html#docker-composer%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9Fgitlab%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB" rel="nofollow noopener noreferrer external" target="_blank">公式のガイド</a> が参考になります。ここの docker-compose.yml をコピーして、適宜編集しています。',se,w,Ge=`Mac 特有の注意点として、例えば 共有 volume はホームディレクトリ以下に配置するなどしないと、書き込み不可能な領域に volume を割り当てようとしてデータが書き込めない(永続化されない)ことがあります。
<code>~/GitLab/docker-compose.yml</code> などに配置するといいでしょう。`,ne,U,Ke=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" yaml="true"><div class="language-id">yaml</div><div class='code-container'><code><div class='line'><span style="color: #F07178">services</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">  </span><span style="color: #F07178">gitlab</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">container_name</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">gitlab</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">image</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">gitlab/gitlab-ce:latest</span><span style="color: #89DDFF">'</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">restart</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">always</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">environment</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">      </span><span style="color: #F07178">GITLAB_OMNIBUS_CONFIG</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">|</span></div><div class='line'><span style="color: #C3E88D">        external_url 'http://YOUR_PC_HOST.local:8929'</span></div><div class='line'><span style="color: #C3E88D">        gitlab_rails['gitlab_shell_ssh_port'] = 2224</span></div><div class='line'><span style="color: #C3E88D">        nginx['listen_port'] = 80</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">ports</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">      </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">8929:80</span><span style="color: #89DDFF">'</span></div><div class='line'><span style="color: #EEFFFF">      </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">2224:22</span><span style="color: #89DDFF">'</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">volumes</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">      </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">./volumes/config:/etc/gitlab</span><span style="color: #89DDFF">'</span></div><div class='line'><span style="color: #EEFFFF">      </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">./volumes/logs:/var/log/gitlab</span><span style="color: #89DDFF">'</span></div><div class='line'><span style="color: #EEFFFF">      </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">./volumes/data:/var/opt/gitlab</span><span style="color: #89DDFF">'</span></div></code></div></pre>`,j,G,Be='<a href="https://gist.github.com/Nagitch/a54118b612265a2e422b38272952484d" rel="nofollow noopener noreferrer external" target="_blank">Gist にも公開しています。</a>',ae,E,Se='<a href="#起動root-のログイン">起動・root のログイン</a>',ie,B,Ae=`なにはともあれ、<code>docker-compose up</code> で立ち上げます。
<code>-d</code> オプションをつけて立ち上げる場合もありますが、私はエラーなどが出ていないかログを確認することを推奨する委員会なので軽く確認してほしいです。`,oe,S,Oe='他の端末からアクセスする場合は<a href="http://YOUR_HOST_NAME_OR_IP:8929/" rel="nofollow noopener noreferrer external" target="_blank">http://YOUR_HOST_NAME_OR_IP:8929/</a> にアクセスして、ローカルネットワークで疎通できていることを確認します。',pe,A,qe='問題なければ root ユーザでログインします。初期パスワードはコンテナ内で自動生成されている（有効期限つき）ため、例えばこちらの方法で確認します： <a href="https://qiita.com/AbeTetsuya20/items/5aaf5efb31865a9e71b1#%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%90%8D" rel="nofollow noopener noreferrer external" target="_blank">GitLab 初期パスワード</a>',re,O,$e="ログインしたら、パスワードを変更してください。",Fe,D,Ne='<a href="#データが永続化されていることを確認する">データが永続化されていることを確認する</a>',ce,q,ze="万が一プロジェクトのデータ（issue やレビュー機能を活用してるかもしれませんね）を失うと号泣するしかないので、万全を期してデータが永続化されていることを確認します。",ve,$,Ie=`<code>docker-compose down</code> でコンテナを停止（滅する）し、<code>docker-compose up</code> で再度立ち上げます。
root で更新後のパスワードでログインして、データが残っていることを確認します。`,de,N,Re="また、 <code>ls -al ./volumes/data</code> などを実行して、何らかのデータが残っていることを確認します。",ue,x,Ue='<a href="#所感など">所感など</a>',fe,z,je="Mac (Mini) を使うと iOS アプリのビルドもできますし、そのような場合に CI/CD が比較的簡単に設定できそうです。ゲーム開発向けのビルド・デプロイサーバーとしての Mac (Mini) の選択肢は結構いいんじゃないかなぁと思いました。",_e,me,ye,C,Ye='<a href="#更新履歴">更新履歴</a>',Ee,I,We="<li>2024-08-04: 初稿</li>";return{c(){r=n("h2"),r.innerHTML=f,d=a(),v=n("p"),v.textContent=F,c=a(),u=n("p"),u.innerHTML=xe,Y=a(),M=n("p"),M.innerHTML=Ce,W=a(),H=n("p"),H.textContent=be,Z=a(),L=n("p"),L.textContent=Me,Q=a(),_=n("h2"),_.innerHTML=He,J=a(),h=n("p"),h.textContent=Le,K=a(),T=n("p"),T.innerHTML=he,V=a(),k=n("ul"),k.innerHTML=Te,X=a(),m=n("h2"),m.innerHTML=ke,ee=a(),g=n("p"),g.textContent=ge,te=a(),y=n("h3"),y.innerHTML=Pe,le=a(),P=n("p"),P.innerHTML=we,se=a(),w=n("p"),w.innerHTML=Ge,ne=a(),U=new pt(!1),j=a(),G=n("p"),G.innerHTML=Be,ae=a(),E=n("h2"),E.innerHTML=Se,ie=a(),B=n("p"),B.innerHTML=Ae,oe=a(),S=n("p"),S.innerHTML=Oe,pe=a(),A=n("p"),A.innerHTML=qe,re=a(),O=n("p"),O.textContent=$e,Fe=a(),D=n("h2"),D.innerHTML=Ne,ce=a(),q=n("p"),q.textContent=ze,ve=a(),$=n("p"),$.innerHTML=Ie,de=a(),N=n("p"),N.innerHTML=Re,ue=a(),x=n("h2"),x.innerHTML=Ue,fe=a(),z=n("p"),z.textContent=je,_e=a(),me=n("hr"),ye=a(),C=n("h2"),C.innerHTML=Ye,Ee=a(),I=n("ul"),I.innerHTML=We,this.h()},l(e){r=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(r)!=="svelte-8rkzn7"&&(r.innerHTML=f),d=o(e),v=i(e,"P",{"data-svelte-h":!0}),p(v)!=="svelte-scnx99"&&(v.textContent=F),c=o(e),u=i(e,"P",{"data-svelte-h":!0}),p(u)!=="svelte-7ddqmz"&&(u.innerHTML=xe),Y=o(e),M=i(e,"P",{"data-svelte-h":!0}),p(M)!=="svelte-1d6e3fe"&&(M.innerHTML=Ce),W=o(e),H=i(e,"P",{"data-svelte-h":!0}),p(H)!=="svelte-1y1i1f"&&(H.textContent=be),Z=o(e),L=i(e,"P",{"data-svelte-h":!0}),p(L)!=="svelte-1co6uwp"&&(L.textContent=Me),Q=o(e),_=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(_)!=="svelte-1f9id2n"&&(_.innerHTML=He),J=o(e),h=i(e,"P",{"data-svelte-h":!0}),p(h)!=="svelte-73f3ji"&&(h.textContent=Le),K=o(e),T=i(e,"P",{"data-svelte-h":!0}),p(T)!=="svelte-1olqz01"&&(T.innerHTML=he),V=o(e),k=i(e,"UL",{"data-svelte-h":!0}),p(k)!=="svelte-57rczx"&&(k.innerHTML=Te),X=o(e),m=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(m)!=="svelte-1k2byxw"&&(m.innerHTML=ke),ee=o(e),g=i(e,"P",{"data-svelte-h":!0}),p(g)!=="svelte-xvmztv"&&(g.textContent=ge),te=o(e),y=i(e,"H3",{id:!0,"data-svelte-h":!0}),p(y)!=="svelte-3a50uh"&&(y.innerHTML=Pe),le=o(e),P=i(e,"P",{"data-svelte-h":!0}),p(P)!=="svelte-kp1bdd"&&(P.innerHTML=we),se=o(e),w=i(e,"P",{"data-svelte-h":!0}),p(w)!=="svelte-ru5pkk"&&(w.innerHTML=Ge),ne=o(e),U=rt(e,!1),j=o(e),G=i(e,"P",{"data-svelte-h":!0}),p(G)!=="svelte-1heev3w"&&(G.innerHTML=Be),ae=o(e),E=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(E)!=="svelte-1w8947d"&&(E.innerHTML=Se),ie=o(e),B=i(e,"P",{"data-svelte-h":!0}),p(B)!=="svelte-1w7b5z4"&&(B.innerHTML=Ae),oe=o(e),S=i(e,"P",{"data-svelte-h":!0}),p(S)!=="svelte-gtsfh0"&&(S.innerHTML=Oe),pe=o(e),A=i(e,"P",{"data-svelte-h":!0}),p(A)!=="svelte-1rd8qax"&&(A.innerHTML=qe),re=o(e),O=i(e,"P",{"data-svelte-h":!0}),p(O)!=="svelte-1gt4dvy"&&(O.textContent=$e),Fe=o(e),D=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(D)!=="svelte-124765a"&&(D.innerHTML=Ne),ce=o(e),q=i(e,"P",{"data-svelte-h":!0}),p(q)!=="svelte-1vidvv"&&(q.textContent=ze),ve=o(e),$=i(e,"P",{"data-svelte-h":!0}),p($)!=="svelte-pqthc6"&&($.innerHTML=Ie),de=o(e),N=i(e,"P",{"data-svelte-h":!0}),p(N)!=="svelte-y40iu3"&&(N.innerHTML=Re),ue=o(e),x=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(x)!=="svelte-m6h8lc"&&(x.innerHTML=Ue),fe=o(e),z=i(e,"P",{"data-svelte-h":!0}),p(z)!=="svelte-r80x3l"&&(z.textContent=je),_e=o(e),me=i(e,"HR",{}),ye=o(e),C=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(C)!=="svelte-mck5y1"&&(C.innerHTML=Ye),Ee=o(e),I=i(e,"UL",{"data-svelte-h":!0}),p(I)!=="svelte-123qdc7"&&(I.innerHTML=We),this.h()},h(){b(r,"id","モチベーション"),b(_,"id","構成"),b(m,"id","導入手順"),b(y,"id","docker-composeyml-を作成"),U.a=j,b(E,"id","起動root-のログイン"),b(D,"id","データが永続化されていることを確認する"),b(x,"id","所感など"),b(C,"id","更新履歴")},m(e,t){l(e,r,t),l(e,d,t),l(e,v,t),l(e,c,t),l(e,u,t),l(e,Y,t),l(e,M,t),l(e,W,t),l(e,H,t),l(e,Z,t),l(e,L,t),l(e,Q,t),l(e,_,t),l(e,J,t),l(e,h,t),l(e,K,t),l(e,T,t),l(e,V,t),l(e,k,t),l(e,X,t),l(e,m,t),l(e,ee,t),l(e,g,t),l(e,te,t),l(e,y,t),l(e,le,t),l(e,P,t),l(e,se,t),l(e,w,t),l(e,ne,t),U.m(Ke,e,t),l(e,j,t),l(e,G,t),l(e,ae,t),l(e,E,t),l(e,ie,t),l(e,B,t),l(e,oe,t),l(e,S,t),l(e,pe,t),l(e,A,t),l(e,re,t),l(e,O,t),l(e,Fe,t),l(e,D,t),l(e,ce,t),l(e,q,t),l(e,ve,t),l(e,$,t),l(e,de,t),l(e,N,t),l(e,ue,t),l(e,x,t),l(e,fe,t),l(e,z,t),l(e,_e,t),l(e,me,t),l(e,ye,t),l(e,C,t),l(e,Ee,t),l(e,I,t)},p:Xe,d(e){e&&(s(r),s(d),s(v),s(c),s(u),s(Y),s(M),s(W),s(H),s(Z),s(L),s(Q),s(_),s(J),s(h),s(K),s(T),s(V),s(k),s(X),s(m),s(ee),s(g),s(te),s(y),s(le),s(P),s(se),s(w),s(ne),U.d(),s(j),s(G),s(ae),s(E),s(ie),s(B),s(oe),s(S),s(pe),s(A),s(re),s(O),s(Fe),s(D),s(ce),s(q),s(ve),s($),s(de),s(N),s(ue),s(x),s(fe),s(z),s(_e),s(me),s(ye),s(C),s(Ee),s(I))}}}function dt(R){let r,f;const d=[R[0],Je];let v={$$slots:{default:[vt]},$$scope:{ctx:R}};for(let F=0;F<d.length;F+=1)v=De(v,d[F]);return r=new Ft({props:v}),{c(){lt(r.$$.fragment)},l(F){st(r.$$.fragment,F)},m(F,c){nt(r,F,c),f=!0},p(F,[c]){const u=c&1?ct(d,[c&1&&Qe(F[0]),c&0&&Qe(Je)]):{};c&2&&(u.$$scope={dirty:c,ctx:F}),r.$set(u)},i(F){f||(at(r.$$.fragment,F),f=!0)},o(F){it(r.$$.fragment,F),f=!1},d(F){ot(r,F)}}}const Je={title:"GitLabをローカルネット上のMac Mini + Dockerでホスティングする",created:"2024-08-04T00:00:00.000Z",updated:"2024-08-04T00:00:00.000Z",tags:["技術","GitLab","Docker","OrbStack","仮想環境","Mac Mini"],images:[],slug:"/blog/gitlab-host-docker-macmini/+page.svelte.md",path:"/blog/gitlab-host-docker-macmini",toc:[{depth:2,slug:"モチベーション",title:"モチベーション"},{depth:2,slug:"構成",title:"構成"},{depth:2,slug:"導入手順",title:"導入手順"},{depth:3,slug:"docker-composeyml-を作成",title:"docker-compose.yml を作成"},{depth:2,slug:"起動root-のログイン",title:"起動・root のログイン"},{depth:2,slug:"データが永続化されていることを確認する",title:"データが永続化されていることを確認する"},{depth:2,slug:"所感など",title:"所感など"},{depth:2,slug:"更新履歴",title:"更新履歴"}]};function ut(R,r,f){return R.$$set=d=>{f(0,r=De(De({},r),Ze(d)))},r=Ze(r),[r]}class yt extends et{constructor(r){super(),tt(this,r,ut,dt,Ve,{})}}export{yt as component};
